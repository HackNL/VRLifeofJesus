"use strict";var VR=VR||{};VR.get=function(){function t(t){var e="/",n=e+"media/thumbnails/"+t,i=e+"media/video/"+t,o=e+"data/"+t;return{base:e,tumbUrl:n,videoUrl:i,dataUrl:o}}function e(t){return document.querySelector(t)}function n(t){return document.querySelectorAll(t)}function i(t){return new Promise(function(e,n){var i=new XMLHttpRequest;i.open("GET",t),i.onloadstart=function(){o(!0)},i.onloadend=function(){o(!0)},i.onload=function(){var t=200;i.status==t?(o(!1),e(i.responseText)):(n(new Error("request failed!")),VR.ux.showErr("There went something wrong"))},i.send()})}function o(t){var e=300;t?VR.get.one(".loading").classList.remove("disabled"):setTimeout(function(){VR.get.one(".loading").classList.add("disabled")},e)}return{urls:t,one:e,all:n,data:i,loading:o}}(),VR.date=function(){function t(t){var n=new Date(t),i=e.months[n.getMonth()],o=n.getDate(),a=e.days[n.getDay()],r=n.getFullYear();return a+" "+o+" "+i+" "+r}var e={days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],months:["January","February","March","April","May","June","July","August","September","October","November","December"]};return{readableDate:t}}(),VR.router=function(){function t(t){var e=VR.get.all(".page"),n=VR.get.one(t);e.forEach(function(t){t.classList.add("disabled")}),n.classList.remove("disabled"),"#cardboard"===t?VR.cardboard.init():"#landing"===t?VR.landing.init():"#video"===t?console.log("hiosd"):"#timeline"===t&&VR.timeline.init()}return{show:t}}(),VR.landing=function(){function t(t){function n(t,e){return Math.floor(Math.random()*(e-t+1))+t}var i=["#F0F082","#8CF08C","#8CF0F0","#8CA0FF","#F05050"],o=document.querySelector("body"),a=n(0,4);o.style.backgroundColor=i[a],VR.get.loading(!1),e()}function e(){var t=VR.get.one("#landingbutton");t.addEventListener("click",function(){VR.router.show("#timeline")})}return{init:t}}(),VR.timeline=function(){function t(){e()}function e(){var t=VR.get.one(".video-list"),e=VR.get.urls("data.json").dataUrl;VR.get.data(e).then(function(e){d=JSON.parse(e),t.appendChild(n(d)),o()})}function n(t){var e=document.createElement("ul");return t.videos.forEach(function(t){var n=Object.keys(t)[0],o=i(t[n].thumbnail,t[n].title,t[n].description,n);e.innerHTML+=o}),e}function i(t,e,n,i){var o=VR.get.urls(t).tumbUrl,a=(VR.get.urls(t).tumbUrl,'<ul><div class="video-wrapper">');return a+='\t\t\t\t\t<div class="thumbnail-wrapper">',a+='\t\t\t\t\t\t<img class="thumbnail" src="'+o+'">',a+='  \t\t\t\t\t<div class="media-caption">',a+='  \t\t\t\t\t\t<div class="caption-content">',a+="  \t\t\t\t\t\t\t<h2>"+e+"</h2>",a+="  \t\t\t\t\t\t\t<span>"+n+"</span>",a+="  \t\t\t\t\t\t</div>",a+="    \t\t\t\t</div>",a+='  \t\t\t\t\t<div class="video-play" data-video-id="'+i+'"">',a+="  \t\t\t\t\t</div>",a+="\t\t\t\t\t</div>",a+='\t\t\t\t\t<video autoplay controls style="display:none;">',a+="\t\t\t\t\tSorry, your browser doesnt support embedded videos",a+="\t\t\t\t\t</video>",a+="</div></ul>"}function o(){VR.get.one(".video-list ul").addEventListener("click",function(t){if("video-play"==t.target.className){var e=t.target.dataset.videoId,n=r(e);console.log(n),n.id=e,console.log("Navigate to the meta video view"),VR.router.show("#video"),a(n)}})}function a(t){console.log(t),document.getElementById("meta-video-play").setAttribute("data-video-id",t.id),document.getElementById("video-title").innerHTML=t[t.id].title,document.getElementById("description").innerHTML=t[t.id].description,document.getElementById("date-alias").innerHTML=t[t.id].datealias,document.getElementById("meta-thumbnail").src="media/thumbnails/"+t[t.id].thumbnail}function r(t){var e;return console.log(d),d.videos.some(function(n,i){n[t]&&(e=n)}),e}var d=void 0;return{init:t}}(),VR.start=function(){var t=function(){VR.router.show("#landing")};return{init:t}}(),VR.start.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
