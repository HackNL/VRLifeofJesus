"use strict";var VR=VR||{};VR.get=function(){function t(t){var e="",n=e+"media/thumbnails/"+t,a=e+"media/video/"+t,i=e+"data/"+t;return{base:e,tumbUrl:n,videoUrl:a,dataUrl:i}}function e(t){return document.querySelector(t)}function n(t){return document.querySelectorAll(t)}function a(t){return new Promise(function(e,n){var a=new XMLHttpRequest;a.open("GET",t),a.onloadstart=function(){i(!0)},a.onloadend=function(){i(!0)},a.onload=function(){var t=200;a.status==t?(i(!1),e(a.responseText)):(n(new Error("request failed!")),console.log("There went something wrong"))},a.send()})}function i(t){var e=1e3;t?VR.get.one(".loading").classList.remove("disabled"):setTimeout(function(){VR.get.one(".loading").classList.add("disabled")},e)}return{urls:t,one:e,all:n,data:a,loading:i}}(),VR.date=function(){function t(t){var n=new Date(t),a=e.months[n.getMonth()],i=n.getDate(),r=e.days[n.getDay()],o=n.getFullYear();return r+" "+i+" "+a+" "+o}var e={days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],months:["January","February","March","April","May","June","July","August","September","October","November","December"]};return{readableDate:t}}(),VR.router=function(){function t(t){var e=VR.get.all(".page"),n=VR.get.one(t);e.forEach(function(t){t.classList.add("disabled")}),n.classList.remove("disabled"),"#cardboard"===t?VR.V3d.init():"#landing"===t?VR.landing.init():"#video"===t?console.log("hiosd"):"#timeline"===t&&VR.timeline.init()}return{show:t}}(),VR.landing=function(){function t(t){n(),e(),VR.get.loading(!1)}function e(){function t(){a+=(e-a)*r,i+=(n-i)*r;var o="translate("+a+"px, "+i+"px) scale(1.1)",s=VR.get.one(".bg");s.style.webkitTransform=o,s.style.MozTransform=o,s.style.msTransform=o,s.style.OTransform=o,s.style.transform=o,window.requestAnimationFrame(t)}var e=0,n=0,a=0,i=0,r=1/30;window.addEventListener("mouseover",function(t){var a=Math.max(-100,Math.min(100,screen.width/2-t.clientX)),i=Math.max(-100,Math.min(100,screen.height/2-t.clientY));e=20*a/100,n=10*i/100}),t()}function n(){var t=VR.get.one("#landingbutton");t.addEventListener("click",function(){VR.router.show("#timeline")})}return{init:t}}(),VR.timeline=function(){function t(){e()}function e(){var t=VR.get.one(".video-list"),e=VR.get.urls("data.json").dataUrl;VR.get.data(e).then(function(e){var a=JSON.parse(e);i=a,t.appendChild(n(a))})}function n(t){var e=document.createElement("ul");return t.videos.forEach(function(t){var n=Object.keys(t)[0],i=a(t.thumbnail,t.title,t.description,n);e.innerHTML+=i}),e}function a(t,e,n,a){var i=VR.get.urls(t).tumbUrl,r=(VR.get.urls(t).tumbUrl,'<li><div class="video-wrapper">');return r+='\t\t\t\t\t<div class="thumbnail-wrapper">',r+='\t\t\t\t\t\t<img class="thumbnail" src="'+i+'">',r+='  \t\t\t\t\t<div class="media-caption">',r+='  \t\t\t\t\t\t<div class="caption-content">',r+="  \t\t\t\t\t\t\t<h2>"+e+"</h2>",r+="  \t\t\t\t\t\t\t<span>"+n+"</span>",r+="  \t\t\t\t\t\t</div>",r+="    \t\t\t\t</div>",r+='  \t\t\t\t\t<div class="video-play" data-video-id="'+a+'"">',r+="  \t\t\t\t\t</div>",r+="\t\t\t\t\t</div>",r+='\t\t\t\t\t<video autoplay controls style="display:none;">',r+="\t\t\t\t\tSorry, your browser doesnt support embedded videos",r+="\t\t\t\t\t</video>",r+="</div></li>"}var i={};return{init:t}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
