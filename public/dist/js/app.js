"use strict";var VR=VR||{};VR.get=function(){function t(t){var e="/",n=e+"media/thumbnails/"+t,o=e+"media/video/"+t,i=e+"data/"+t;return{base:e,tumbUrl:n,videoUrl:o,dataUrl:i}}function e(t){return document.querySelector(t)}function n(t){return document.querySelectorAll(t)}function o(t){return new Promise(function(e,n){var o=new XMLHttpRequest;o.open("GET",t),o.onloadstart=function(){i(!0)},o.onloadend=function(){i(!0)},o.onload=function(){var t=200;o.status==t?(i(!1),e(o.responseText)):(n(new Error("request failed!")),VR.ux.showErr("There went something wrong"))},o.send()})}function i(t){var e=1e3;t?VR.get.one(".loading").classList.remove("disabled"):setTimeout(function(){VR.get.one(".loading").classList.add("disabled")},e)}return{urls:t,one:e,all:n,data:o,loading:i}}(),VR.date=function(){function t(t){var n=new Date(t),o=e.months[n.getMonth()],i=n.getDate(),a=e.days[n.getDay()],r=n.getFullYear();return a+" "+i+" "+o+" "+r}var e={days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],months:["January","February","March","April","May","June","July","August","September","October","November","December"]};return{readableDate:t}}(),VR.router=function(){function t(t){var e=VR.get.all(".page"),n=VR.get.one(t);e.forEach(function(t){t.classList.add("disabled")}),n.classList.remove("disabled"),"#cardboard"===t?VR.V3d.init():"#landing"===t?VR.landing.init():"#video"===t?console.log("hiosd"):"#timeline"===t&&VR.timeline.init()}return{show:t}}(),VR.landing=function(){function t(t){n(),e(),VR.get.loading(!1)}function e(){function t(){o+=(e-o)*a,i+=(n-i)*a;var r="translate("+o+"px, "+i+"px) scale(1.1)",d=VR.get.one(".bg");d.style.webkitTransform=r,d.style.MozTransform=r,d.style.msTransform=r,d.style.OTransform=r,d.style.transform=r,window.requestAnimationFrame(t)}var e=0,n=0,o=0,i=0,a=1/30;window.addEventListener("mouseover",function(t){var o=Math.max(-100,Math.min(100,screen.width/2-t.clientX)),i=Math.max(-100,Math.min(100,screen.height/2-t.clientY));e=20*o/100,n=10*i/100}),t()}function n(){var t=VR.get.one("#landingbutton");t.addEventListener("click",function(){VR.router.show("#timeline")})}return{init:t}}(),VR.timeline=function(){function t(){e()}function e(){var t=VR.get.one(".video-list"),e=VR.get.urls("data.json").dataUrl;VR.get.data(e).then(function(e){s=JSON.parse(e),t.appendChild(n(s)),i()})}function n(t){var e=document.createElement("ul");return t.videos.forEach(function(t){var n=Object.keys(t)[0],i=o(t.thumbnail,t.title,t.description,n);console.log(t),e.innerHTML+=i}),e}function o(t,e,n,o){var i=VR.get.urls(t).tumbUrl;VR.get.urls(t).tumbUrl;console.log(t);var a='<li><div class="video-wrapper">';return a+='\t\t\t\t\t<div class="thumbnail-wrapper">',a+='\t\t\t\t\t\t<img class="thumbnail" src="'+i+'">',a+='  \t\t\t\t\t<div class="media-caption">',a+='  \t\t\t\t\t\t<div class="caption-content">',a+="  \t\t\t\t\t\t\t<h2>"+e+"</h2>",a+="  \t\t\t\t\t\t\t<span>"+n+"</span>",a+="  \t\t\t\t\t\t</div>",a+="    \t\t\t\t</div>",a+='  \t\t\t\t\t<div class="video-play" data-video-id="'+o+'"">',a+="  \t\t\t\t\t</div>",a+="\t\t\t\t\t</div>",a+='\t\t\t\t\t<video autoplay controls style="display:none;">',a+="\t\t\t\t\tSorry, your browser doesnt support embedded videos",a+="\t\t\t\t\t</video>",a+="</div></li>"}function i(){VR.get.one(".video-list ul").addEventListener("click",function(t){if("video-play"==t.target.className){c=t.target.dataset.videoId,console.log(c);var e=l(c);console.log(e),e.id=c,console.log("Navigate to the meta video view"),VR.router.show("#video"),d(e)}})}function a(){VR.get.one("#meta-video-play").addEventListener("click",function(t){var e=t.target.dataset.videoId,n=l(e)[e];console.log("Play te video"),console.log(n);var o=document.getElementById("meta-video");o.src="media/video/"+n,o.style.display="block",document.getElementsByClassName("meta-thumbnail-wrapper")[0].style.display="none"})}function r(){VR.get.one(".close").addEventListener("click",function(t){VR.router.show("#timeline");var e=document.getElementById("meta-video");console.log("check"),console.log(e.pause()),console.log(e),e.pause(),e.currentTime=0})}function d(t){console.log(t),document.getElementById("meta-video-play").setAttribute("data-video-id",t.id),document.getElementById("video-title").innerHTML=t.title,document.getElementById("description").innerHTML=t.description,document.getElementById("date-alias").innerHTML=t.datealias,document.getElementById("meta-thumbnail").src="media/thumbnails/"+t.thumbnail,a(),r()}function l(t){var e;return console.log(s),s.videos.some(function(n,o){n[t]&&(e=n)}),e}var s=void 0,c=void 0;return{init:t}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
