"use strict";var VR=VR||{};VR.get=function(){function t(t){var e="/",n=e+"media/thumbnails/"+t,i=e+"media/video/"+t,o=e+"data/"+t;return{base:e,tumbUrl:n,videoUrl:i,dataUrl:o}}function e(t){return document.querySelector(t)}function n(t){return document.querySelectorAll(t)}function i(t){return new Promise(function(e,n){var i=new XMLHttpRequest;i.open("GET",t),i.onloadstart=function(){o(!0)},i.onloadend=function(){o(!0)},i.onload=function(){var t=200;i.status==t?(o(!1),e(i.responseText)):(n(new Error("request failed!")),VR.ux.showErr("There went something wrong"))},i.send()})}function o(t){var e=1e3;t?VR.get.one(".loading").classList.remove("disabled"):setTimeout(function(){VR.get.one(".loading").classList.add("disabled")},e)}return{urls:t,one:e,all:n,data:i,loading:o}}(),VR.date=function(){function t(t){var n=new Date(t),i=e.months[n.getMonth()],o=n.getDate(),a=e.days[n.getDay()],r=n.getFullYear();return a+" "+o+" "+i+" "+r}var e={days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],months:["January","February","March","April","May","June","July","August","September","October","November","December"]};return{readableDate:t}}(),VR.router=function(){function t(t){var e=VR.get.all(".page"),n=VR.get.one(t);e.forEach(function(t){t.classList.add("disabled")}),n.classList.remove("disabled"),"#cardboard"===t?VR.V3d.init():"#landing"===t?VR.landing.init():"#video"===t?console.log("hiosd"):"#timeline"===t&&VR.timeline.init()}return{show:t}}(),VR.landing=function(){function t(t){n(),e(),VR.get.loading(!1)}function e(){function t(){i+=(e-i)*a,o+=(n-o)*a;var r="translate("+i+"px, "+o+"px) scale(1.1)",d=VR.get.one(".bg");d.style.webkitTransform=r,d.style.MozTransform=r,d.style.msTransform=r,d.style.OTransform=r,d.style.transform=r,window.requestAnimationFrame(t)}var e=0,n=0,i=0,o=0,a=1/30;window.addEventListener("mouseover",function(t){var i=Math.max(-100,Math.min(100,screen.width/2-t.clientX)),o=Math.max(-100,Math.min(100,screen.height/2-t.clientY));e=20*i/100,n=10*o/100}),t()}function n(){var t=VR.get.one("#landingbutton");t.addEventListener("click",function(){VR.router.show("#timeline")})}return{init:t}}(),VR.timeline=function(){function t(){e()}function e(){var t=VR.get.one(".video-list"),e=VR.get.urls("data.json").dataUrl;VR.get.data(e).then(function(e){l=JSON.parse(e),t.appendChild(n(l)),o()})}function n(t){var e=document.createElement("ul");return t.videos.forEach(function(t){var n=Object.keys(t)[0],o=i(t[n].thumbnail,t[n].title,t[n].description,n);e.innerHTML+=o}),e}function i(t,e,n,i){var o=VR.get.urls(t).tumbUrl,a=(VR.get.urls(t).tumbUrl,'<li><div class="video-wrapper">');return a+='\t\t\t\t\t<div class="thumbnail-wrapper">',a+='\t\t\t\t\t\t<img class="thumbnail" src="'+o+'">',a+='  \t\t\t\t\t<div class="media-caption">',a+='  \t\t\t\t\t\t<div class="caption-content">',a+="  \t\t\t\t\t\t\t<h2>"+e+"</h2>",a+="  \t\t\t\t\t\t\t<span>"+n+"</span>",a+="  \t\t\t\t\t\t</div>",a+="    \t\t\t\t</div>",a+='  \t\t\t\t\t<div class="video-play" data-video-id="'+i+'"">',a+="  \t\t\t\t\t</div>",a+="\t\t\t\t\t</div>",a+='\t\t\t\t\t<video autoplay controls style="display:none;">',a+="\t\t\t\t\tSorry, your browser doesnt support embedded videos",a+="\t\t\t\t\t</video>",a+="</div></li>"}function o(){VR.get.one(".video-list ul").addEventListener("click",function(t){if("video-play"==t.target.className){u=t.target.dataset.videoId;var e=s(u);console.log(e),e.id=u,console.log("Navigate to the meta video view"),VR.router.show("#video"),d(e)}})}function a(){VR.get.one("#meta-video-play").addEventListener("click",function(t){var e=t.target.dataset.videoId,n=s(e)[e];console.log("Play te video");var i=document.getElementById("meta-video");i.src="media/video/"+n.filename,i.style.display="block",document.getElementsByClassName("meta-thumbnail-wrapper")[0].style.display="none"})}function r(){VR.get.one(".close").addEventListener("click",function(t){VR.router.show("#timeline");var e=document.getElementById("meta-video");console.log("check"),console.log(e.pause()),console.log(e),e.pause(),e.currentTime=0})}function d(t){console.log(t),document.getElementById("meta-video-play").setAttribute("data-video-id",t.id),document.getElementById("video-title").innerHTML=t[t.id].title,document.getElementById("description").innerHTML=t[t.id].description,document.getElementById("date-alias").innerHTML=t[t.id].datealias,document.getElementById("meta-thumbnail").src="media/thumbnails/"+t[t.id].thumbnail,a(),r()}function s(t){var e;return console.log(l),l.videos.some(function(n,i){n[t]&&(e=n)}),e}var l=void 0,u=void 0;return{init:t}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
