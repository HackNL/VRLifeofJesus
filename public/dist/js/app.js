"use strict";var VR=VR||{};VR.get=function(){function t(t){var e="",n=e+"media/thumbnails/"+t,i=e+"media/video/"+t,a=e+"data/"+t;return{base:e,tumbUrl:n,videoUrl:i,dataUrl:a}}function e(t){return document.querySelector(t)}function n(t){return document.querySelectorAll(t)}function i(t){return new Promise(function(e,n){var i=new XMLHttpRequest;i.open("GET",t),i.onloadstart=function(){a(!0)},i.onloadend=function(){a(!0)},i.onload=function(){var t=200;i.status==t?(a(!1),e(i.responseText)):(n(new Error("request failed!")),console.log("There went something wrong"))},i.send()})}function a(t){var e=1e3;t?VR.get.one(".loading").classList.remove("disabled"):setTimeout(function(){VR.get.one(".loading").classList.add("disabled")},e)}return{urls:t,one:e,all:n,data:i,loading:a}}(),VR.date=function(){function t(t){var n=new Date(t),i=e.months[n.getMonth()],a=n.getDate(),o=e.days[n.getDay()],r=n.getFullYear();return o+" "+a+" "+i+" "+r}var e={days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],months:["January","February","March","April","May","June","July","August","September","October","November","December"]};return{readableDate:t}}(),VR.router=function(){function t(t){var e=VR.get.all(".page"),n=VR.get.one(t);e.forEach(function(t){t.classList.add("disabled")}),n.classList.remove("disabled"),"#cardboard"===t?VR.V3d.init():"#landing"===t?VR.landing.init():"#video"===t?console.log("hiosd"):"#timeline"===t&&VR.timeline.init()}return{show:t}}(),VR.landing=function(){function t(t){n(),e(),VR.get.loading(!1)}function e(){function t(){i+=(e-i)*o,a+=(n-a)*o;var r="translate("+i+"px, "+a+"px) scale(1.1)",d=VR.get.one(".bg");d.style.webkitTransform=r,d.style.MozTransform=r,d.style.msTransform=r,d.style.OTransform=r,d.style.transform=r,window.requestAnimationFrame(t)}var e=0,n=0,i=0,a=0,o=1/30;window.addEventListener("mouseover",function(t){var i=Math.max(-100,Math.min(100,screen.width/2-t.clientX)),a=Math.max(-100,Math.min(100,screen.height/2-t.clientY));e=20*i/100,n=10*a/100}),t()}function n(){var t=VR.get.one("#landingbutton");t.addEventListener("click",function(){VR.router.show("#timeline")})}return{init:t}}(),VR.timeline=function(){function t(){e()}function e(){var t=VR.get.one(".video-list"),e=VR.get.urls("data.json").dataUrl;VR.get.data(e).then(function(t){var e=JSON.parse(t);return n(e)}).then(function(e){t.appendChild(e),a()})}function n(t){VR.timeline.timelineData=t;var e=document.createElement("ul");return t.videos.forEach(function(t){var n=i(t.thumbnail,t.title,t.description,t.id);e.innerHTML+=n}),e}function i(t,e,n,i){var a=VR.get.urls(t).tumbUrl,o=(VR.get.urls(t).tumbUrl,'<li><div class="video-wrapper">');return o+='\t\t\t\t\t<div class="thumbnail-wrapper">',o+='\t\t\t\t\t\t<img class="thumbnail" src="'+a+'">',o+='  \t\t\t\t\t<div class="media-caption">',o+='  \t\t\t\t\t\t<div class="caption-content">',o+="  \t\t\t\t\t\t\t<h2>"+e+"</h2>",o+="  \t\t\t\t\t\t\t<span>"+n+"</span>",o+="  \t\t\t\t\t\t</div>",o+="    \t\t\t\t</div>",o+='  \t\t\t\t\t<div class="video-play" data-video-id="'+i+'"">',o+="  \t\t\t\t\t</div>",o+="\t\t\t\t\t</div>",o+='\t\t\t\t\t<video autoplay controls style="display:none;">',o+="\t\t\t\t\tSorry, your browser doesnt support embedded videos",o+="\t\t\t\t\t</video>",o+="</div></li>"}function a(){document.querySelector(".video-list ul").addEventListener("click",function(t){if("video-play"===t.target.className){s=t.target.dataset.videoId;var e=l(s);console.log(e),e.id=s,console.log("Navigate to the meta video view"),VR.router.show("#video"),d(e)}})}function o(){VR.get.one("#meta-video-play").addEventListener("click",function(t){var e=t.target.dataset.videoId,n=l(e);console.log("Play te video");var i=document.getElementById("meta-video");i.src="media/video/"+n.filename,i.style.display="block",document.getElementsByClassName("meta-thumbnail-wrapper")[0].style.display="none"})}function r(){VR.get.one(".close").addEventListener("click",function(t){VR.router.show("#timeline");var e=document.getElementById("meta-video");console.log(e.pause()),e.pause(),e.currentTime=0})}function d(t){console.log(t),document.getElementById("meta-video-play").setAttribute("data-video-id",t.id),document.getElementById("video-title").innerHTML=t.title,document.getElementById("description").innerHTML=t.description,document.getElementById("date-alias").innerHTML=t.datealias,document.getElementById("meta-thumbnail").src="media/thumbnails/"+t.thumbnail,o(),r()}function l(t){var e;return u.videos.some(function(n,i){if(n.id===t)return e=n,!0}),e}var s=void 0,u={};return{init:t,timelineData:u}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
